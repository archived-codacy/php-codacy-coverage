#!/usr/bin/env php
<?php

require 'vendor/autoload.php';

use Codacy\Coverage\Parser\CloverParser;
use Codacy\Coverage\Parser\PhpUnitXmlParser;
use Codacy\Coverage\Util\CodacyApiClient;
use Codacy\Coverage\Util\GitClient;
use Codacy\Coverage\Util\JsonProducer;


$projectToken = getenv("CODACY_PROJECT_TOKEN");

if ($projectToken == false) {
    die(
        "Cannot continue with execution as long as your project token is not set as an environmental variable." . PHP_EOL .
        "Please type: export CODACY_PROJECT_TOKEN=<YOUR TOKEN>" . PHP_EOL
    );
}

if (sizeof($argv) != 2) {
    die("Invalid length of arguments. Only one argument for coverage format allowed." . PHP_EOL .
        "It should either be clover or phpunit." . PHP_EOL . 
        "## Example: php vendor/bin/codacycoverage clover" . PHP_EOL
    );
} else {
    $coverageFormat = $argv[1];
}

switch ($coverageFormat) {

    case "clover":
        $parser = new CloverParser(
            join(DIRECTORY_SEPARATOR, array("build", "logs", "clover.xml"))
        );
        break;

    case "phpunit":
        $parser = new PhpUnitXmlParser(
            join(DIRECTORY_SEPARATOR, array("build", "coverage-xml", "index.xml"))
        );
        $parser->setDirOfFileXmls(join(DIRECTORY_SEPARATOR, array("build", "coverage-xml")));
        break;

    default:
        throw new \InvalidArgumentException(
            'No valid coverage format argument found. It should either be clover or phpunit.' . PHP_EOL .
            "Example: php vendor/bin/codacycoverage clover"
        );
}

$jsonProducer = new JsonProducer();

$jsonProducer->setParser($parser);

$data = $jsonProducer->makeJson();

$gClient = new GitClient(getcwd());

$commit = $gClient->getHashOfLatestCommit();

$baseUrl = getenv("CODACY_API_BASE_URL");

if ($baseUrl == false) {
    $baseUrl = "https://www.codacy.com";
}

$url = $baseUrl . "/api/coverage/" . $projectToken . "/" . $commit;

CodacyApiClient::postData($url, $data);
